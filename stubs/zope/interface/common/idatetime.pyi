from datetime import date, datetime, time, timedelta, tzinfo, tzinfo as tzinfo_t
from time import struct_time
from typing import ClassVar, SupportsIndex

from zope.interface import classImplements, Interface

class ITimeDeltaClass(Interface):
    min: ITimeDelta
    max: ITimeDelta
    resolution: ITimeDelta

class ITimeDelta(ITimeDeltaClass):
    days: int
    seconds: int
    microseconds: int
classImplements(timedelta, ITimeDelta)

class IDateClass(Interface):
    min: ClassVar[IDate]
    max: ClassVar[IDate]
    resolution: ClassVar[ITimeDelta]
    def today() -> IDate: ...
    def fromtimestamp(timestamp: float) -> IDate: ...
    def fromordinal(ordinal: int) -> IDate: ...

class IDate(IDateClass):
    year: int
    month: int
    day: int
    def replace(year: SupportsIndex = ..., month: SupportsIndex = ..., day: SupportsIndex = ...) -> IDate: ...
    def timetuple() -> struct_time: ...
    def toordinal() -> int: ...
    def weekday() -> int: ...
    def isoweekday() -> int: ...
    def isocalendar() -> tuple[int, int, int]: ...
    def isoformat() -> str: ...
    def ctime() -> str: ...
    def strftime(format: str) -> str: ...
classImplements(date, IDate)

class ITimeClass(Interface):
    min: ClassVar[ITime]
    max: ClassVar[ITime]
    resolution: ClassVar[ITimeDelta]

class ITime(ITimeClass):
    hour: int
    minute: int
    second: int
    microsecond: int
    tzinfo: ITZInfo | None
    def replace(hour: SupportsIndex = ..., minute: SupportsIndex = ..., second: SupportsIndex = ..., microsecond: SupportsIndex = ..., tzinfo: tzinfo_t | None = None) -> ITime: ...
    def isoformat() -> str: ...
    def strftime(format: str) -> str: ...
    def utcoffset() -> ITimeDelta | None: ...
    def dst() -> ITimeDelta | None: ...
    def tzname() -> str | None: ...
classImplements(time, ITime)

class IDateTimeClass(Interface):
    min: ClassVar[IDateTime]
    max: ClassVar[IDateTime]
    resolution: ClassVar[ITimeDelta]
    def today() -> IDateTime: ...
    def now(tz: tzinfo | None = None) -> IDateTime: ...
    def utcnow() -> IDateTime: ...
    def fromtimestamp(timestamp: float, tz: tzinfo | None = None) -> IDateTime: ...
    def utcfromtimestamp(timestamp: float) -> IDateTime: ...
    def fromordinal(ordinal: int) -> IDateTime: ...
    def combine(date: date, time: time) -> IDateTime: ...

class IDateTime(IDate, IDateTimeClass):  # type: ignore[misc]
    hour: int
    minute: int
    second: int
    microsecond: int
    tzinfo: ITZInfo | None
    def date() -> IDate: ...
    def time() -> ITime: ...
    def timetz() -> ITime: ...
    def replace(year: SupportsIndex = ..., month: SupportsIndex = ..., day: SupportsIndex = ..., hour: SupportsIndex = ..., minute: SupportsIndex = ..., second: SupportsIndex = ..., microsecond: SupportsIndex = ..., tzinfo: tzinfo_t | None = None) -> IDateTime: ...
    def astimezone(tz: tzinfo_t | None = ...) -> IDateTime: ...
    def utcoffset() -> ITimeDelta | None: ...
    def dst() -> ITimeDelta | None: ...
    def tzname() -> str | None: ...
    def utctimetuple() -> struct_time: ...
    def isoformat(sep: str = 'T') -> str: ...
    def ctime() -> str: ...
classImplements(datetime, IDateTime)

class ITZInfo(Interface):
    def utcoffset(dt: datetime | None) -> ITimeDelta | None: ...
    def dst(dt: datetime | None) -> ITimeDelta | None: ...
    def tzname(dt: datetime | None) -> str | None: ...
    def fromutc(dt: datetime) -> IDateTime: ...
classImplements(tzinfo, ITZInfo)
