import io
from _typeshed import ReadableBuffer, WriteableBuffer
from collections.abc import Callable, Iterable, Iterator
from types import TracebackType
from typing import Any, BinaryIO

from zope.interface import classImplements
from zope.interface.common import ABCInterface

class IIOBase(ABCInterface):
    def __iter__() -> Iterator[bytes]: ...
    def __next__() -> bytes: ...
    # FIXME: Make Self work
    def __enter__() -> Any: ...
    def __exit__(  # noqa: PYI036
        exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: TracebackType | None  # noqa: PYI036
    ) -> None: ...
    def close() -> None: ...
    def fileno() -> int: ...
    def flush() -> None: ...
    def isatty() -> bool: ...
    def readable() -> bool: ...
    read: Callable[..., Any]
    def readlines(hint: int = -1, /) -> list[bytes]: ...
    def seek(offset: int, whence: int = ..., /) -> int: ...
    def seekable() -> bool: ...
    def tell() -> int: ...
    def truncate(size: int | None = ..., /) -> int: ...
    def writable() -> bool: ...
    write: Callable[..., Any]
    def writelines(lines: Iterable[ReadableBuffer], /) -> None: ...
    def readline(size: int | None = -1, /) -> bytes: ...
    def __del__() -> None: ...
    closed: bool
classImplements(io.IOBase, IIOBase)

class IRawIOBase(IIOBase):
    def readall() -> bytes: ...
    def readinto(buffer: WriteableBuffer, /) -> int | Any: ...
    def write(b: ReadableBuffer, /) -> int | Any: ...
    def read(size: int = -1, /) -> bytes | Any: ...
classImplements(io.RawIOBase, IRawIOBase)

class IBufferedIOBase(IIOBase):
    def detach() -> IRawIOBase: ...
    def readinto(buffer: WriteableBuffer, /) -> int: ...
    def write(buffer: ReadableBuffer, /) -> int: ...
    def readinto1(buffer: WriteableBuffer, /) -> int: ...
    def read(size: int | None = ..., /) -> bytes: ...
    def read1(size: int = ..., /) -> bytes: ...
classImplements(io.BufferedIOBase, IBufferedIOBase)

class ITextIOBase(IIOBase):
    encoding: str
    errors: str | None
    newlines: str | tuple[str, ...] | None
    def __iter__() -> Iterator[str]: ...  # type: ignore[override]
    def __next__() -> str: ...  # type: ignore[override]
    def detach() -> BinaryIO: ...
    def write(s: str, /) -> int: ...
    def writelines(lines: Iterable[str], /) -> None: ...  # type: ignore[override]
    def readline(size: int = ..., /) -> str: ...  # type: ignore[override]
    def readlines(hint: int = -1, /) -> list[str]: ...  # type: ignore[override]
    def read(size: int | None = ..., /) -> str: ...
classImplements(io.TextIOBase, ITextIOBase)
