from collections.abc import Collection
from typing import Literal

from zope.interface.interfaces import IInterface, IMethod

__all__ = ["BadImplements", "BrokenImplementation", "BrokenMethodImplementation", "DoesNotImplement", "Invalid", "InvalidInterface", "MultipleInvalid"]

class Invalid(Exception): ...

class _TargetInvalid(Invalid):
    @property
    def interface(self) -> IInterface | None: ...
    @property
    def target(self) -> object | Literal["<Not Given>"]: ...

class DoesNotImplement(_TargetInvalid):
    def __init__(self, interface: IInterface, target: object, /) -> None: ...
    @property
    def interface(self) -> IInterface: ...
    @property
    def target(self) -> object: ...

class BrokenImplementation(_TargetInvalid):
    def __init__(self, interface: IInterface, name: str, target: object | None = None, /) -> None: ...
    @property
    def interface(self) -> IInterface: ...
    @property
    def name(self) -> str: ...

class BrokenMethodImplementation(_TargetInvalid):
    def __init__(self, method: IMethod, mess: str, implementation: object | None = None, interface: IInterface | None = None, target: object | None = None, /) -> None: ...
    @property
    def method(self) -> IMethod: ...
    @property
    def mess(self) -> str: ...

class MultipleInvalid(_TargetInvalid):
    def __init__(self, interface: IInterface, target: object, exceptions: Collection[Invalid]) -> None: ...
    @property
    def interface(self) -> IInterface: ...
    @property
    def target(self) -> object: ...
    @property
    def exceptions(self) -> tuple[Invalid, ...]: ...

class InvalidInterface(Exception): ...
class BadImplements(TypeError): ...
