from collections.abc import Callable, Generator, Sequence
from typing import Any, TypeVar, overload
from typing_extensions import TypeAlias

from zope.interface.declarations import implementer
from zope.interface.interfaces import IAdapterRegistry, IInterface, ISpecification

__all__ = ["AdapterRegistry", "VerifyingAdapterRegistry"]

_T = TypeVar("_T")
_DefaultT = TypeVar("_DefaultT")
_AdapterT = TypeVar("_AdapterT", bound=Callable[..., Any])
_Registration: TypeAlias = tuple[Sequence[ISpecification], IInterface, str, Callable[..., Any]]
_Subscription: TypeAlias = tuple[Sequence[ISpecification], IInterface | None, Callable[..., Any]]

class BaseAdapterRegistry:
    def __init__(self, bases: tuple[IAdapterRegistry, ...] = ()) -> None: ...
    @property
    def __bases__(self) -> tuple[IAdapterRegistry, ...]: ...
    @__bases__.setter
    def __bases__(self, value: tuple[IAdapterRegistry, ...]) -> None: ...
    def changed(self, originally_changed: IAdapterRegistry) -> None: ...
    @overload
    def register(self, required: Sequence[ISpecification | None], provided: IInterface, name: str, value: None) -> None: ...
    @overload
    def register(self, required: Sequence[ISpecification | None], provided: type[_T], name: str, value: Callable[..., _T]) -> None: ...
    def registered(self, required: Sequence[ISpecification | None], provided: type[_T], name: str = '') -> _T | None: ...
    def allRegistrations(self) -> Generator[_Registration, None, None]: ...
    @overload
    def unregister(self, required: Sequence[ISpecification | None], provided: IInterface, name: str, value: None = None) -> bool | None: ...
    @overload
    def unregister(self, required: Sequence[ISpecification | None], provided: type[_T], name: str, value: Callable[..., _T]) -> bool | None: ...
    @overload
    def subscribe(self, required: Sequence[ISpecification | None], provided: None, value: Callable[..., object]) -> None: ...
    @overload
    def subscribe(self, required: Sequence[ISpecification | None], provided: type[_T], value: Callable[..., _T]) -> None: ...
    def subscribed(self, required: Sequence[ISpecification], provided: IInterface | None, subscriber: _AdapterT) -> _AdapterT | None: ...
    def allSubscriptions(self) -> Generator[_Subscription, None, None]: ...
    @overload
    def unsubscribe(self, required: Sequence[ISpecification], provided: None, value: Callable[..., object] | None = None) -> None: ...
    @overload
    def unsubscribe(self, required: Sequence[ISpecification], provided: IInterface, value: None = None) -> None: ...
    @overload
    def unsubscribe(self, required: Sequence[ISpecification], provided: type[_T], value: Callable[..., _T]) -> None: ...
    def rebuild(self) -> None: ...

    # NOTE: The following methods only exist on instances and are copied from the internal lookup instance
    @overload
    def lookup(self, required: Sequence[ISpecification | None], provided: type[_T], name: str = '', default: None = None) -> Callable[..., _T] | None: ...
    @overload
    def lookup(self, required: Sequence[ISpecification | None], provided: type[_T], name: str = '', *, default: _DefaultT) -> Callable[..., _T] | _DefaultT: ...
    @overload
    def lookup(self, required: Sequence[ISpecification | None], provided: type[_T], name: str, default: _DefaultT) -> Callable[..., _T] | _DefaultT: ...
    @overload
    def queryMultiAdapter(self, objects: Sequence[object], provided: type[_T], name: str = '', default: None = None) -> _T | None: ...
    @overload
    def queryMultiAdapter(self, objects: Sequence[object], provided: type[_T], name: str = '', *, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def queryMultiAdapter(self, objects: Sequence[object], provided: type[_T], name: str, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def lookup1(self, required: ISpecification | None, provided: type[_T], name: str = '', default: None = None) -> Callable[..., _T] | None: ...
    @overload
    def lookup1(self, required: ISpecification | None, provided: type[_T], name: str = '', *, default: _DefaultT) -> Callable[..., _T] | _DefaultT: ...
    @overload
    def lookup1(self, required: ISpecification | None, provided: type[_T], name: str, default: _DefaultT) -> Callable[..., _T] | _DefaultT: ...
    @overload
    def queryAdapter(self, object: object, provided: type[_T], name: str = '', default: None = None) -> _T | None: ...
    @overload
    def queryAdapter(self, object: object, provided: type[_T], name: str = '', *, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def queryAdapter(self, object: object, provided: type[_T], name: str, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def adapter_hook(self, object: object, provided: type[_T], name: str = '', default: None = None) -> _T | None: ...
    @overload
    def adapter_hook(self, object: object, provided: type[_T], name: str = '', *, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def adapter_hook(self, object: object, provided: type[_T], name: str, default: _DefaultT) -> _T | _DefaultT: ...
    def lookupAll(self, required: Sequence[ISpecification | None], provided: type[_T]) -> Sequence[tuple[str, Callable[..., _T]]]: ...
    def names(self, required: Sequence[ISpecification | None], provided: IInterface) -> list[str]: ...
    @overload
    def subscriptions(self, required: Sequence[ISpecification | None], provided: type[_T]) -> Sequence[Callable[..., _T]]: ...
    @overload
    def subscriptions(self, required: Sequence[ISpecification | None], provided: None) -> Sequence[Callable[..., object]]: ...
    @overload
    def subscribers(self, objects: Sequence[object], provided: type[_T]) -> list[_T]: ...
    @overload
    def subscribers(self, objects: Sequence[object], provided: None) -> tuple[()]: ...

@implementer(IAdapterRegistry)
class AdapterRegistry(BaseAdapterRegistry): ...

@implementer(IAdapterRegistry)
class VerifyingAdapterRegistry(BaseAdapterRegistry): ...
