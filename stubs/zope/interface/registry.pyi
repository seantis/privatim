from collections.abc import Callable, Generator, Sequence
from typing import Any, Final, TypeVar, overload
from typing_extensions import TypeAlias

from zope.interface.adapter import AdapterRegistry
from zope.interface.declarations import implementer
from zope.interface.interfaces import IAdapterRegistration, IComponentRegistry, IComponents, IInterface, IHandlerRegistration, ISpecification, ISubscriptionAdapterRegistration, IUtilityRegistration

__all__ = ["Components"]

_T = TypeVar("_T")
_DefaultT = TypeVar("_DefaultT")
_Adapts: TypeAlias = Sequence[ISpecification | type[object] | None]

@implementer(IComponents)
class Components:
    adapters: AdapterRegistry
    utilities: AdapterRegistry
    def __init__(self, name: str = "", bases: tuple[IComponents, ...] = ()) -> None: ...
    @property
    def __bases__(self) -> tuple[IComponents, ...]: ...
    @__bases__.setter
    def __bases__(self, value: tuple[IComponents, ...]) -> None: ...
    def __reduce__(self) -> tuple[Any, ...]: ...
    def registerUtility(self, component: object | None = None, provided: IInterface | None = None, name: str = "", info: str = "", event: bool = True, factory: Callable[[], object] | None = None) -> None: ...
    def unregisterUtility(self, component: object | None = None, provided: IInterface | None = None, name: str = "", factory: Callable[[], object] | None = None) -> bool: ...
    def registeredUtilities(self) -> Generator[UtilityRegistration, None, None]: ...
    @overload
    def queryUtility(self, provided: type[_T], name: str = "", default: None = None) -> _T | None: ...
    @overload
    def queryUtility(self, provided: type[_T], name: str = "", *, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def queryUtility(self, provided: type[_T], name: str, default: _DefaultT) -> _T | _DefaultT: ...
    def getUtility(self, provided: type[_T], name: str = "") -> _T: ...
    def getUtilitiesFor(self, interface: type[_T]) -> Generator[tuple[str, _T], None, None]: ...
    def getAllUtilitiesRegisteredFor(self, interface: type[_T]) -> list[_T]: ...
    def registerAdapter(self, factory: Callable[..., object], required: _Adapts | None = None, provided: IInterface | None = None, name: str = "", info: str = "", event: bool = True) -> None: ...
    def unregisterAdapter(self, factory: Callable[..., object] | None = None, required: _Adapts | None = None, provided: IInterface | None = None, name: str = "") -> bool: ...
    def registeredAdapters(self) -> Generator[AdapterRegistration, None, None]: ...
    @overload
    def queryAdapter(self, object: object, interface: type[_T], name: str = "", default: None = None) -> _T | None: ...
    @overload
    def queryAdapter(self, object: object, interface: type[_T], name: str = "", *, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def queryAdapter(self, object: object, interface: type[_T], name: str, default: _DefaultT) -> _T | _DefaultT: ...
    def getAdapter(self, object: object, interface: type[_T], name: str = "") -> _T: ...
    @overload
    def queryMultiAdapter(self, objects: Sequence[object], interface: type[_T], name: str = "", default: None = None) -> _T | None: ...
    @overload
    def queryMultiAdapter(self, objects: Sequence[object], interface: type[_T], name: str = "", *, default: _DefaultT) -> _T | _DefaultT: ...
    @overload
    def queryMultiAdapter(self, objects: Sequence[object], interface: type[_T], name: str, default: _DefaultT) -> _T | _DefaultT: ...
    def getMultiAdapter(self, objects: Sequence[object], interface: type[_T], name: str = "") -> _T: ...
    def getAdapters(self, objects: Sequence[object], provided: type[_T]) -> Generator[tuple[str, _T], None, None]: ...
    def registerSubscriptionAdapter(self, factory: Callable[..., object], required: _Adapts | None = None, provided: IInterface | None = None, name: str = "", info: str = "", event: bool = True) -> None: ...
    def registeredSubscriptionAdapters(self) -> Generator[SubscriptionRegistration, None, None]: ...
    def unregisterSubscriptionAdapter(self, factory: Callable[..., object] | None = None, required: _Adapts | None = None, provided: IInterface | None = None, name: str = "") -> bool: ...
    @overload
    def subscribers(self, objects: Sequence[object], provided: type[_T]) -> list[_T]: ...
    @overload
    def subscribers(self, objects: Sequence[object], provided: None) -> tuple[()]: ...
    def registerHandler(self, factory: Callable[..., object], required: _Adapts | None = None, name: str = "", info: str = "", event: bool = True) -> None: ...
    def registeredHandlers(self) -> Generator[HandlerRegistration, None, None]: ...
    def unregisterHandler(self, factory: Callable[..., object] | None = None, required: _Adapts | None = None, name: str = "") -> bool: ...
    def handle(self, *objects: Sequence[object]) -> None: ...
    def rebuildUtilityRegistryFromLocalCache(self, rebuild: bool = False) -> dict[str, Any]: ...

@implementer(IUtilityRegistration)
class UtilityRegistration:
    registry: IComponentRegistry
    provided: IInterface
    name: str
    component: Any
    info: str
    factory: Callable[[], Any] | None
    def __init__(self, registry: IComponentRegistry, provided: IInterface, name: str, component: object, doc: str, factory: Callable[[], object] | None = None) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: UtilityRegistration) -> bool: ...
    def __le__(self, other: UtilityRegistration) -> bool: ...
    def __gt__(self, other: UtilityRegistration) -> bool: ...
    def __ge__(self, other: UtilityRegistration) -> bool: ...

@implementer(IAdapterRegistration)
class AdapterRegistration:
    registry: IComponentRegistry
    required: Sequence[ISpecification]
    provided: IInterface
    name: str
    factory: Callable[..., Any]
    info: str
    def __init__(self, registry: IComponentRegistry, required: Sequence[ISpecification], provided: IInterface, name: str, component: Callable[..., Any], doc: str) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: AdapterRegistration) -> bool: ...
    def __le__(self, other: AdapterRegistration) -> bool: ...
    def __gt__(self, other: AdapterRegistration) -> bool: ...
    def __ge__(self, other: AdapterRegistration) -> bool: ...

@implementer(ISubscriptionAdapterRegistration)
class SubscriptionRegistration(AdapterRegistration): ...

@implementer(IHandlerRegistration)
class HandlerRegistration(AdapterRegistration):
    registry: IComponentRegistry
    required: Sequence[ISpecification]
    name: str
    handler: Callable[..., Any]
    info: str
    provided: Final[None]  # type: ignore[assignment,misc]
    def __init__(self, registry: IComponentRegistry, required: Sequence[ISpecification], name: str, handler: Callable[..., object], doc: str) -> None: ...
    @property
    def factory(self) -> Callable[..., Any]: ...  # type: ignore[override]
