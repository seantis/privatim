from gettext import GNUTranslations
from translationstring import TranslationString as TranslationString
from translationstring import TranslationStringFactory as TranslationStringFactory
from typing import IO
from typing_extensions import deprecated
from typing_extensions import Self

from pyramid.interfaces import ILocalizer
from pyramid.interfaces import IRequest
from pyramid.interfaces import ITranslationDirectories

class Localizer(ILocalizer): ...

def default_locale_negotiator(request: IRequest) -> str | None: ...
def negotiate_locale_name(request: IRequest) -> str: ...
@deprecated('Since version 1.5, use request.locale_name instead')
def get_locale_name(request: IRequest) -> str: ...
def make_localizer(current_locale_name: str, translation_directories: ITranslationDirectories | list[str]) -> Localizer: ...
@deprecated('Since version 1.5, use request.localizer instead')
def get_localizer(request: IRequest) -> ILocalizer: ...

class Translations(GNUTranslations):
    def __init__(self, fileobj: IO[str] | None = None, domain: str = ...) -> None: ...
    @classmethod
    def load(cls, dirname: str | None = None, locales: list[str] | tuple[str, ...] | str | None = None, domain: str = ...) -> Self: ...
    def add(self, translations: Self, merge: bool = True) -> Self: ...
    def merge(self, translations: GNUTranslations) -> Self: ...
    def dgettext(self, domain: str, message: str) -> str: ...
    def dugettext(self, domain: str, message: str) -> str: ...
    def dngettext(self, domain: str, singular: str, plural: str, num: int) -> str: ...
    def dungettext(self, domain: str, singular: str, plural: str, num: int) -> str: ...

class LocalizerRequestMixin:
    localizer: ILocalizer
    locale_name: str
